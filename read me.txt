 git --version      version de git
******
 git config --global user.name "Dayra"   usuario
 git config --global user.email "dayruchita@gmail.com   correo
 git config --global -l   para saber el usuario y el correo para el control de cambios
******
 cd GIT\ W/folder1/     seleccionar el fichero
 git init      iniciar
 git status    conocer los archivos que van a someterse para el control de cambios
******
Para cambiar este estado se pone:
 git add .
Se puede usar tambien git add -A
Tambien git add --all

En caso de que solamente se desee añadir el control de cambios de un archivo se pone
 git add Nombre_archivo

Si se desea agregar todo lo de una carpeta con una determinada extension
git add Nombre_Carpeta/*.extension
 
Y despues con esto se pueden ver todos los cambios
 git status 
Ya con esto se añade al control de cambios
******
Para tener la descripcion de los cambios de los archivos
 git commit -m "Commit Inicial"
Commit Inicial-> Comentario que se le agrega de guia
******
En caso de que se realice algun cambio para saber cual fue se escribe 
 git diff
******
 Si se desea deshacer los cambios realizados se pone 
 git checkout
******
Para tener la lista de cambios en el repositorio
 git log


******
para crear una carpeta dentro del repositorio
git add Nombre_Carpeta/
y con git status se comprueba que existe un nuevo archivo
******
Si se desea quitar algun archivo del control de cambios
git reset Nombre_Carpeta/Nombre_archivo.extension
******
Para obtener info de la ayuda se hace
 git help Nombre_Comando
******
Para escribir abreviaciones de los comandos
git config --global alias.Nombre_letra "Comando"

git config --global alias.l "log"
Es decir poniendo git l-> git log
******
Se agrega un comentario y se ha escrito mal y se desea modificar
git commit --amend -m "Comentario rectificado"
******
En caso de que se desee modificar el nombre de un archivo para que git lleve el control
git mv Nombre_archivo Nuevo_nombre Archivo
******
Para eliminar um archivo se hace
git rm Nombre_Archivo.extension

Para recuperar la posicion antes de elimina el archivo
git reset --soft 

Para recuperar el archivo 
git reset --hard

Ir a un punto del historico sin poner los comentarios que vienen despues:
git reset --mixed 

Despues de soft, hard, mixed se pone el commit de log(numero largo)

Con git reflog se tiene el historico completo de los cambios
******
Si se desea tener archivos que no se reconozcan para el control de cambios debe hacerse un archivo con extension .gitignore
y dentro se pone el archivo(s) que se desean excluir. En caso de que se desee incluir una carpeta se pone /Nombre_carpeta/
*******
Union rama secundaria con la principal: fast forward
Para crear una rama 
 git branch Nombre_rama

git log --oneline --decorate --all --graph
Se especifica la rama en la que estoy
 (HEAD -> master, Rama) aqui se indica que estoy en la rama master

Si se desea cambiar a una determinada rama es 
git checkout Nombre_Rama

(HEAD -> Rama, master) se cambio de master a Rama

Para salir de la rama 
 git checkout Nombre_rama
No hay necesidad de volver a entrar a la rama es todo el tiempo intercambiando con checkout

Para crear una nueva rama y acceder a ella de forma directa
 git checkout -b Rama_nueva

Se desea fusionar la rama principal con la secundaria
 git merge Rama(esta es la rama secundaria a unir con la pcpal)

Para eliminar la rama secundaria
git branch -d Nombre_ramaSecundaria

*******
Tengo que estar bien ubicada en la rama...
cada vez que se modifique un archivo se le da add y se añade commit.

Si se desea crear una nueva rama se hace el checkout -b Nombre_rama

Si se produce un conflicto <<<<<Head y ====== esto se borra y se hace add y se le añade commit.
******
Crear una etiqueta
 git tag Nombre_etiqueta

Para borrar esta etiqueta
git tag -d Nombre_etiqueta 

Para poner las versiones 
git tag -a v1.0.0 -m "Primera fase"

Si se pone git show v1.0.0 aparece info del archivo.
*******
El idcopiado sale despues de hacer
git log --oneline --decorate --all --graph

Si se desea poner una version cuando se hace el git log:
 git tag -a v0.0.2 idcopiado -m "Texto"
******
Para trabajar con github se crea una nueva cuenta 

En la pagina salen los comandos que se deben ejecutar. Cuando es un proyecto nuevo
git remote add origin htpps:...

git push -u origin master
Y redirecciona para lapagina de github hay que poner el usuario y la contraseña.
Ya con esto se carga toda la confiuracion y solo es cuestion de actualizar la pagina.

En caso de que se desee agregar un nuevo archivo desde el html se da la opcion de crear nuevo archivo...
En la opcion de Preview es como va a lucir el codigo. EN commit new file se crea los comentarios para este archivo.
Para traer la info desde la pagina web se emplea:
git fetch
Trae los cambios desde la pagina web y luego hay que hacer merge.

git pull (+ practica)
Traer los cambios desde la pagina web(repositorio de github)
y para llevarlos es con push.
 solamente se escribe en la consola git pull

*****
La opcion de fork es para copiar el repositorio de alguien en el nuestro y poder usarlo.
En el repositorio de la otra persona se hace fork.
 
En la carpeta donde se van a almacenar estos archivos se abre una nueva terminal y se copia la direccion de html de github 
 git clone <direccion_html>

Ya con esto se crea la carpeta con todos los datos de repositorio seleccionado

Si se realiza alguna modificacion
 git push origin master
Para actualizar en la pagina web


 











